#include <16f877a.h>
#include <math.h>  // Para usar atan

#fuses HS, NOWDT, NOPROTECT, NOPUT, NOLVP, NOBROWNOUT
#use delay(clock=20000000)
#use I2C(MASTER, SDA=PIN_C4, SCL=PIN_C3, SLOW)

#use standard_io(D)
#use standard_io(A)
#define use_servo_1 
#define use_servo_2
// Definiciones de pines para los servos
#define servo_1 PIN_A0
#define servo_2 PIN_A1

#include <lcd.c>         // Librería para el manejo de la LCD
#include <MPU6050.c>     // Librería para el manejo del MPU6050
#include <servo_st.c>    // Librería para servos

void main() {
    lcd_init();
    MPU6050_init();  // Inicializa el MPU6050
    servo_init();    // Inicializa los servos

    printf(lcd_putc, "BIENVENIDO");

    float Ax, Ay;
    int angle_x, angle_y;

    while (true) {
        // Obtener los valores de los ángulos del giroscopio
        Ax = MPU6050_get_Ax();
        Ay = MPU6050_get_Ay();

        // Convertir a valores enteros
        int x_angle = (int)(Ax * 100);
        int y_angle = (int)(Ay * 100);

        // Mostrar los valores en la pantalla LCD
        lcd_gotoxy(1, 1);
        printf(lcd_putc, "\fAx:%d Ay:%d", x_angle, y_angle);

        // Calcular el ángulo para servo 1 basado en X
        if (x_angle < -2) {
            angle_x = 90 - x_angle;  // Si X es negativo, restar de 90
        } else if (x_angle > 2) {
            angle_x = 90 + x_angle;       // Si X es positivo, sumar a 90
        } else {
            angle_x = 90;                 // Mantener en el centro si está dentro de +-2
        }

        // Calcular el ángulo para servo 2 basado en Y
        if (y_angle < -2) {
            angle_y = 90 - y_angle;  // Si Y es negativo, restar de 90
        } else if (y_angle > 2) {
            angle_y = 90 + y_angle;       // Si Y es positivo, sumar a 90
        } else {
            angle_y = 90;                 // Mantener en el centro si está dentro de +-2
        }

        // Limitar los ángulos para asegurar que estén en el rango del servo
        //angle_x = (angle_x < 0) ? 0 : (angle_x > 180) ? 180 : angle_x;
        //angle_y = (angle_y < 0) ? 0 : (angle_y > 180) ? 180 : angle_y;;
        servo_1_write(angle_x);
        delay_ms(500);
        servo_2_write(angle_y);
        delay_ms(500);
        // esta funcionando 
    }
}

