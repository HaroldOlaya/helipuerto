#pragma config PLLDIV = 2, CPUDIV = OSC1_PLL2, USBDIV = 2
#pragma config FOSC = HSPLL_HS, FCMEN = OFF, IESO = OFF
#pragma config PWRT = OFF, BOR = OFF, BORV = 3, VREGEN = OFF
#pragma config WDT = OFF
#pragma config WDTPS = 32768
#pragma config CCP2MX = ON, PBADEN = OFF, LPT1OSC = OFF, MCLRE = ON
#pragma config STVREN = ON, LVP = OFF, ICPRT = OFF, XINST = OFF
#pragma config CP0 = OFF, CP1 = OFF, CP2 = OFF, CP3 = OFF
#pragma config CPB = OFF, CPD = OFF
#pragma config WRT0 = OFF, WRT1 = OFF, WRT2 = OFF, WRT3 = OFF
#pragma config WRTC = OFF, WRTB = OFF, WRTD = OFF
#pragma config EBTR0 = OFF, EBTR1 = OFF, EBTR2 = OFF, EBTR3 = OFF
#pragma config EBTRB = OFF

#define _XTAL_FREQ 48000000
#include <xc.h>
#include <stdio.h>

#include "lcd.h"                                // Libreria de la pantalla lcd
//#include "i2c.h"                                // Libreria del protocolo I2C
#include "mpu6050.h"                            // Libreria del sensor MPU6050

float ax, ay, az, gx, gy, gz, t;                // Almacena los datos del sensor MPU6050
char buffer[14];

void main()
{
    ADCON1bits.PCFG = 0x0F;                     // Coloca todos los pines como digitales
    I2C_Init_Master(I2C_100KHZ);                // Inicializa el protocolo I2C
    MPU6050_Init();                             // Inicializa el sensor MPU6050
    Lcd_Init();                                 // Inicializa la pantalla lcd
    
    while(1)
    {
        ax = MPU6050_Read_Ax();                 // Lectura del eje x del acelerometro
        ay = MPU6050_Read_Ay();                 // Lectura del eje y del acelerometro
        az = MPU6050_Read_Az();                 // Lectura del eje z del acelerometro
        
        gx = MPU6050_Read_Gx();                 // Lectura del eje x del giroscopio
        gy = MPU6050_Read_Gy();                 // Lectura del eje y del giroscopio
        gz = MPU6050_Read_Gz();                 // Lectura del eje z del giroscopio
        
        t = MPU6050_Read_Temperature();         // Lectura del sensor de temperatura interno
        
        Lcd_Clear();
        Lcd_Set_Cursor(1,1);                    // Imprime el valor del acelerometro del eje X
        sprintf(buffer, "Ax:%0.2f", ax);
        Lcd_Write_String(buffer);
        Lcd_Set_Cursor(2,1);                    // Imprime el valor del acelerometro del eje Y
        sprintf(buffer, "Ay:%0.2f", ay);
        Lcd_Write_String(buffer);
        Lcd_Set_Cursor(3,1);                    // Imprime el valor del acelerometro del eje Z
        sprintf(buffer, "Az:%0.2f", az);
        Lcd_Write_String(buffer);
        Lcd_Set_Cursor(4,1);                    // Imprime el valor de la temperatura del sensor interno
        sprintf(buffer, "T:%0.2f", t);
        Lcd_Write_String(buffer);
        Lcd_Set_Cursor(1,11);                   // Imprime el valor del giroscopio del eje X
        sprintf(buffer, "Gx:%0.2f", gx);
        Lcd_Write_String(buffer);
        Lcd_Set_Cursor(2,11);                   // Imprime el valor del giroscopio del eje Y
        sprintf(buffer, "Gy:%0.2f", gy);
        Lcd_Write_String(buffer);
        Lcd_Set_Cursor(3,11);                   // Imprime el valor del giroscopio del eje Z
        sprintf(buffer, "Gz:%0.2f", gz);
        Lcd_Write_String(buffer);
        __delay_ms(200);
    }
}
